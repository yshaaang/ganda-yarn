// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  USER
  ADMIN
}

model User {
  id       String @id @default(uuid())
  username String @unique
  password String

  first_name String
  last_name  String
  gender     String

  mobile_number String
  home_address  String
  email_address String

  created_at  DateTime  @default(now())
  modified_at DateTime?

  carts          Cart[]
  orders         Order[]
  order_products Order_Product[]
  reviews        Review[]
  session        Session?

  type UserType @default(USER)
}

model Product {
  id String @id @default(uuid())

  name               String
  description        String @db.LongText
  preview_image_link String

  created_at  DateTime  @default(now())
  modified_at DateTime?

  order_product     Order_Product[]
  product_attribute Product_Attribute[]
  carts             Cart[]
}

model Status {
  code        String @id
  description String @db.LongText

  order Int

  created_at  DateTime  @default(now())
  modified_at DateTime?

  orders Order[]
}

model Product_Attribute {
  id String @id @default(uuid())

  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String

  variant    String
  image_link String
  price      Decimal
  sold       Int     @default(0)
  stock      Int     @default(0)

  created_at  DateTime  @default(now())
  modified_at DateTime?

  carts          Cart[]
  order_products Order_Product[]
}

model Cart {
  id String @id @default(uuid())

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String

  product_attribute Product_Attribute @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  attribute_id      String

  quantity    Int     @default(1)
  total_price Decimal

  created_at  DateTime  @default(now())
  modified_at DateTime?

  @@unique([user_id, product_id, attribute_id])
}

model Order {
  id String @id @default(uuid())

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  first_name String
  last_name  String

  mobile_number String
  home_address  String
  email_address String

  status      Status @relation(fields: [status_code], references: [code], onDelete: Cascade)
  status_code String

  created_at  DateTime  @default(now())
  modified_at DateTime?

  order_products Order_Product[]
}

model Order_Product {
  id String @id @default(uuid())

  order    Order  @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id String

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String

  product_attribute Product_Attribute @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  attribute_id      String

  quantity Int     @default(1)
  price    Decimal

  created_at  DateTime  @default(now())
  modified_at DateTime?

  review Review?
}

model Review {
  id String @id @default(uuid())

  order_product    Order_Product @relation(fields: [order_product_id], references: [id], onDelete: Cascade)
  order_product_id String        @unique

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  rate    Int
  comment String @db.LongText

  created_at  DateTime  @default(now())
  modified_at DateTime?
}

model Session {
  id String @id @default(uuid())

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @unique
}
